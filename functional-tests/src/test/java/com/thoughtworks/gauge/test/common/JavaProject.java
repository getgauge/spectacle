package com.thoughtworks.gauge.test.common;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thoughtworks.gauge.Table;
import com.thoughtworks.gauge.TableRow;
import com.thoughtworks.gauge.test.StepImpl;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.ArrayUtils;

public class JavaProject extends GaugeProject {
    public static final String DEFAULT_AGGREGATION = "AND";

    public JavaProject(String projName) throws IOException {
        super("java", projName);
    }

    public Map<String, String> getLanguageSpecificFiles() {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("src", "dir");
        map.put("libs", "dir");
        map.put(Util.combinePath("src", "test", "java", "StepImplementation.java"), "file");
        map.put(Util.combinePath("env", "default", "java.properties"), "file");
        return map;
    }

    @Override
    public List<String> getLanguageSpecificGitIgnoreText() {
        return new ArrayList<String>() {
            private static final long serialVersionUID = -187244323836571837L;

            {
            add("# Gauge - metadata dir\n.gauge");
            add("# Gauge - log files dir\nlogs");
            add("# Gauge - reports generated by reporting plugins\nreports");
            add("# Gauge - java class output directory\ngauge_bin");
        }};
    }

    public void implementStep(StepImpl stepImpl) throws Exception {
        List<String> paramTypes = new ArrayList<>();

        StepValueExtractor stepValueExtractor = new StepValueExtractor();
        StepValueExtractor.StepValue stepValue =  stepValueExtractor.getFor(stepImpl.getFirstStepText());
        ArrayList<String> stepValues = stepValueExtractor.getValueFor(stepImpl.getAllStepTexts());

        String className = Util.getUniqueName();
        StringBuilder classText = createClassTeplate(className, stepValues, stepImpl.getPackageName());
        if (stepImpl.isContinueOnFailure()) {
            classText.insert(0, "import com.thoughtworks.gauge.ContinueOnFailure;\n");
            classText.append("\n@ContinueOnFailure");
            classText.append("(").append(String.join(",", stepImpl.getErrorTypes())).append(")\n");
        }
        classText.append("public void ").append("stepImplementation(");
        addParameters(classText, paramTypes, stepValue);
        String implementation = stepImpl.getImplementation();
        implementation = getStepImplementation(stepValue, implementation, paramTypes, stepImpl.isValidStatement());
        classText.append(") {\n").append(implementation).append("\n}\n");
        classText.append("}");
        Util.writeToFile(Util.combinePath(getStepImplementationsDir(stepImpl.getImplementationDir()), className + ".java"), classText.toString());
    }

    @Override
    public String getDataStoreWriteStatement(TableRow row, List<String> columnNames) {
        String dataStoreType = row.getCell("datastore type");
        String key = row.getCell("key");
        String value = row.getCell("value");
        return "com.thoughtworks.gauge.datastore." + dataStoreType + "DataStore.put(\"" + key + "\",\"" + value + "\");";
    }

    @Override
    public String getDataStorePrintValueStatement(TableRow row, List<String> columnNames) {
        String dataStoreType = row.getCell(columnNames.get(3));
        String key = row.getCell(columnNames.get(1));
        return "System.out.println(com.thoughtworks.gauge.datastore." + dataStoreType + "DataStore.get(\"" + key + "\"));";
    }

    @Override
    public void configureCustomScreengrabber(String stubScreenshot) throws IOException {
        String className = Util.getUniqueName();
        StringBuilder sb = new StringBuilder();
        sb.append("import com.thoughtworks.gauge.screenshot.CustomScreenshotWriter;\n");
        sb.append("\n");
        sb.append("public class " + className + " implements CustomScreenshotWriter {\n");
        sb.append("\n");
        sb.append("    public String takeScreenshot() {\n");
        sb.append("        return \"" + stubScreenshot + "\";\n");
        sb.append("    }\n");
        sb.append("}");
        Util.writeToFile(Util.combinePath(getStepImplementationsDir(""), className + ".java"), sb.toString());
    }

    @Override
    public String getStepImplementation(StepValueExtractor.StepValue stepValue, String implementation, List<String> paramTypes, boolean appendCode) {
        StringBuilder builder = new StringBuilder();
        if (implementation.equalsIgnoreCase(PRINT_PARAMS)) {
            builder.append("System.out.println(");
            for (int i = 0; i < stepValue.paramCount; i++) {
                builder.append("\"param").append(i).append("=\"+").append("param").append(i);
                if (i != stepValue.paramCount - 1) {
                    builder.append("+\",\"+");
                }
            }
            builder.append(");\n");
        } else if (implementation.equalsIgnoreCase(THROW_EXCEPTION)) {
            return "throw new RuntimeException();";
        } else if (implementation.equalsIgnoreCase(FAILING_IMPLEMENTATION)) {
                return "assertThat(false).isTrue();";
        } else if (implementation.equalsIgnoreCase(CAPTURE_SCREENSHOT)) {
            return "com.thoughtworks.gauge.Gauge.captureScreenshot();";
        } else if (implementation.toLowerCase().startsWith("throw")) {
            return "throw new " + implementation.trim().substring(implementation.indexOf(' ')) + "();";
        } else {
            if (appendCode) {
                builder.append(implementation);
            } else {
                builder.append("System.out.println(").append(implementation).append(");\n");
            }
        }
        return builder.toString();
    }

    @Override
    public void createHookWithPrint(String hookLevel, String hookType, String printStatement) throws Exception {
        String implementation = String.format("System.out.println(\"%s\");", printStatement);
        String method = createHookMethod(hookLevel, hookType, implementation, DEFAULT_AGGREGATION, new ArrayList<String>());
        createHook(hookLevel, hookType, method);
    }

    @Override
    public void createHookWithException(String hookLevel, String hookType) throws IOException {
        createHook(hookLevel, hookType, createHookMethod(hookLevel, hookType, "throw new RuntimeException();", DEFAULT_AGGREGATION, new ArrayList<String>()));
    }

    @Override
    public void createHooksWithTagsAndPrintMessage(String hookLevel, String hookType, String printString, String aggregation, Table tagsTable) throws IOException {
        String implementation = String.format("System.out.println(\"%s\");", printString);
        String method = createHookMethod(hookLevel, hookType, implementation, aggregation, tagsTable.getColumnValues("tags"));
        createHook(hookLevel, hookType, method);
    }

    private void createHook(String hookLevel, String hookType, String method) throws IOException {
        StringBuilder classText = new StringBuilder();
        classText.append(String.format("import com.thoughtworks.gauge.%s;\n", hookName(hookLevel, hookType)));
        classText.append("import com.thoughtworks.gauge.Operator;");
        String className = Util.getUniqueName();
        classText.append("public class ").append(className).append("{\n");
        classText.append(method);
        classText.append("\n}");
        Util.writeToFile(Util.combinePath(getStepImplementationsDir(""), className + ".java"), classText.toString());
    }

    private String createHookMethod(String hookLevel, String hookType, String implementation, String aggregation, List<String> tags) {
        StringBuilder methodText = new StringBuilder();
        String hookAttributes = isSuiteHook(hookLevel) ? "" : hookAttributesString(tags, aggregation);
        methodText.append(String.format("@%s(%s)\n", hookName(hookLevel, hookType), hookAttributes));
        methodText.append(String.format("public void hook() {\n"));
        methodText.append(String.format("%s\n", implementation));
        methodText.append("\n}\n");
        return methodText.toString();
    }

    private boolean isSuiteHook(String hookLevel) {
        return hookLevel.trim().equals("suite");
    }

    private String hookName(String hookLevel, String hookType) {
        return String.format("%s%s", Util.capitalize(hookType), Util.capitalize(hookLevel));
    }

    private String hookAttributesString(List<String> tags, String aggregation) {
        return String.format("tags = {%s}, tagAggregation = Operator.%s ", Util.joinList(Util.quotifyValues(tags)), aggregation);
    }

    private String getStepImplementationsDir(String implementationDir) {
        if (implementationDir != "") {
            String[] paths = new String[]{getProjectDir().getAbsolutePath()};

            String implPath = Util.combinePath(ArrayUtils.addAll(paths, StringUtils.split(implementationDir, "/")));
            if (!new File(implPath).exists()) new File(implPath).mkdirs();
            return implPath;
        }
        return Util.combinePath(getProjectDir().getAbsolutePath(), "src", "test", "java");
    }

    private void addParameters(StringBuilder classText, List<String> paramTypes, StepValueExtractor.StepValue stepValue) {
        for (int i = 0; i < stepValue.paramCount; i++) {
            if (i + 1 == stepValue.paramCount) {
                classText.append("Object param").append(i);
            } else {
                classText.append("Object param").append(i).append(", ");
            }
            paramTypes.add("Object");
        }
    }

    private StringBuilder createStepTeplate(ArrayList<String> stepTexts) {
        StringBuilder step = new StringBuilder();
        if(stepTexts.size()==1){
            return step.append("@Step(\"").append(stepTexts.get(0)).append("\")\n");
        }
        else {
            StringBuilder commaSeparated = new StringBuilder();
            for(String stepText:stepTexts){
                commaSeparated.append("\"").append(stepText).append("\",");
            }
            return step.append("@Step({").append(commaSeparated).append("})\n");
        }
    }

    private StringBuilder createClassTeplate(String className, ArrayList<String> stepTexts, String packageName) {
        StringBuilder classText = new StringBuilder();
        if( packageName != null)
            classText.append(String.format("package %s;\n", packageName));
        classText.append("import com.thoughtworks.gauge.Step;\n");
        classText.append("import static org.assertj.core.api.Assertions.*;\n\n");
        classText.append("public class ").append(className).append("{\n");
        classText.append(createStepTeplate(stepTexts));
        return classText;
    }
}
